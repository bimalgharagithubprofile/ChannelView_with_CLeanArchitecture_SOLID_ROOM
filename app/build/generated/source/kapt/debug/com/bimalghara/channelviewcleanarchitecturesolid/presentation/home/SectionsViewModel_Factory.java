// Generated by Dagger (https://dagger.dev).
package com.bimalghara.channelviewcleanarchitecturesolid.presentation.home;

import com.bimalghara.channelviewcleanarchitecturesolid.common.dispatcher.DispatcherProviderSource;
import com.bimalghara.channelviewcleanarchitecturesolid.domain.use_case.GetCategoriesFromLocalUseCase;
import com.bimalghara.channelviewcleanarchitecturesolid.domain.use_case.GetChannelsFromLocalUseCase;
import com.bimalghara.channelviewcleanarchitecturesolid.domain.use_case.GetEpisodesFromLocalUseCase;
import com.bimalghara.channelviewcleanarchitecturesolid.domain.use_case.GetErrorDetailsUseCase;
import com.bimalghara.channelviewcleanarchitecturesolid.domain.use_case.RequestCategoriesFromNetworkUseCase;
import com.bimalghara.channelviewcleanarchitecturesolid.domain.use_case.RequestChannelsFromNetworkUseCase;
import com.bimalghara.channelviewcleanarchitecturesolid.domain.use_case.RequestEpisodesFromNetworkUseCase;
import com.bimalghara.channelviewcleanarchitecturesolid.utils.NetworkConnectivitySource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SectionsViewModel_Factory implements Factory<HomeViewModel> {
  private final Provider<DispatcherProviderSource> dispatcherProviderSourceProvider;

  private final Provider<NetworkConnectivitySource> networkConnectivitySourceProvider;

  private final Provider<GetErrorDetailsUseCase> errorDetailsUseCaseProvider;

  private final Provider<GetCategoriesFromLocalUseCase> getCategoriesFromLocalUseCaseProvider;

  private final Provider<GetChannelsFromLocalUseCase> getChannelsFromLocalUseCaseProvider;

  private final Provider<GetEpisodesFromLocalUseCase> getEpisodesFromLocalUseCaseProvider;

  private final Provider<RequestCategoriesFromNetworkUseCase> requestCategoriesFromNetworkUseCaseProvider;

  private final Provider<RequestChannelsFromNetworkUseCase> requestChannelsFromNetworkUseCaseProvider;

  private final Provider<RequestEpisodesFromNetworkUseCase> requestEpisodesFromNetworkUseCaseProvider;

  public SectionsViewModel_Factory(
      Provider<DispatcherProviderSource> dispatcherProviderSourceProvider,
      Provider<NetworkConnectivitySource> networkConnectivitySourceProvider,
      Provider<GetErrorDetailsUseCase> errorDetailsUseCaseProvider,
      Provider<GetCategoriesFromLocalUseCase> getCategoriesFromLocalUseCaseProvider,
      Provider<GetChannelsFromLocalUseCase> getChannelsFromLocalUseCaseProvider,
      Provider<GetEpisodesFromLocalUseCase> getEpisodesFromLocalUseCaseProvider,
      Provider<RequestCategoriesFromNetworkUseCase> requestCategoriesFromNetworkUseCaseProvider,
      Provider<RequestChannelsFromNetworkUseCase> requestChannelsFromNetworkUseCaseProvider,
      Provider<RequestEpisodesFromNetworkUseCase> requestEpisodesFromNetworkUseCaseProvider) {
    this.dispatcherProviderSourceProvider = dispatcherProviderSourceProvider;
    this.networkConnectivitySourceProvider = networkConnectivitySourceProvider;
    this.errorDetailsUseCaseProvider = errorDetailsUseCaseProvider;
    this.getCategoriesFromLocalUseCaseProvider = getCategoriesFromLocalUseCaseProvider;
    this.getChannelsFromLocalUseCaseProvider = getChannelsFromLocalUseCaseProvider;
    this.getEpisodesFromLocalUseCaseProvider = getEpisodesFromLocalUseCaseProvider;
    this.requestCategoriesFromNetworkUseCaseProvider = requestCategoriesFromNetworkUseCaseProvider;
    this.requestChannelsFromNetworkUseCaseProvider = requestChannelsFromNetworkUseCaseProvider;
    this.requestEpisodesFromNetworkUseCaseProvider = requestEpisodesFromNetworkUseCaseProvider;
  }

  @Override
  public HomeViewModel get() {
    return newInstance(dispatcherProviderSourceProvider.get(), networkConnectivitySourceProvider.get(), errorDetailsUseCaseProvider.get(), getCategoriesFromLocalUseCaseProvider.get(), getChannelsFromLocalUseCaseProvider.get(), getEpisodesFromLocalUseCaseProvider.get(), requestCategoriesFromNetworkUseCaseProvider.get(), requestChannelsFromNetworkUseCaseProvider.get(), requestEpisodesFromNetworkUseCaseProvider.get());
  }

  public static SectionsViewModel_Factory create(
      Provider<DispatcherProviderSource> dispatcherProviderSourceProvider,
      Provider<NetworkConnectivitySource> networkConnectivitySourceProvider,
      Provider<GetErrorDetailsUseCase> errorDetailsUseCaseProvider,
      Provider<GetCategoriesFromLocalUseCase> getCategoriesFromLocalUseCaseProvider,
      Provider<GetChannelsFromLocalUseCase> getChannelsFromLocalUseCaseProvider,
      Provider<GetEpisodesFromLocalUseCase> getEpisodesFromLocalUseCaseProvider,
      Provider<RequestCategoriesFromNetworkUseCase> requestCategoriesFromNetworkUseCaseProvider,
      Provider<RequestChannelsFromNetworkUseCase> requestChannelsFromNetworkUseCaseProvider,
      Provider<RequestEpisodesFromNetworkUseCase> requestEpisodesFromNetworkUseCaseProvider) {
    return new SectionsViewModel_Factory(dispatcherProviderSourceProvider, networkConnectivitySourceProvider, errorDetailsUseCaseProvider, getCategoriesFromLocalUseCaseProvider, getChannelsFromLocalUseCaseProvider, getEpisodesFromLocalUseCaseProvider, requestCategoriesFromNetworkUseCaseProvider, requestChannelsFromNetworkUseCaseProvider, requestEpisodesFromNetworkUseCaseProvider);
  }

  public static HomeViewModel newInstance(DispatcherProviderSource dispatcherProviderSource,
                                          NetworkConnectivitySource networkConnectivitySource,
                                          GetErrorDetailsUseCase errorDetailsUseCase,
                                          GetCategoriesFromLocalUseCase getCategoriesFromLocalUseCase,
                                          GetChannelsFromLocalUseCase getChannelsFromLocalUseCase,
                                          GetEpisodesFromLocalUseCase getEpisodesFromLocalUseCase,
                                          RequestCategoriesFromNetworkUseCase requestCategoriesFromNetworkUseCase,
                                          RequestChannelsFromNetworkUseCase requestChannelsFromNetworkUseCase,
                                          RequestEpisodesFromNetworkUseCase requestEpisodesFromNetworkUseCase) {
    return new HomeViewModel(dispatcherProviderSource, networkConnectivitySource, errorDetailsUseCase, getCategoriesFromLocalUseCase, getChannelsFromLocalUseCase, getEpisodesFromLocalUseCase, requestCategoriesFromNetworkUseCase, requestChannelsFromNetworkUseCase, requestEpisodesFromNetworkUseCase);
  }
}
